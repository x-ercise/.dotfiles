"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.19.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** Describes the kind of data to be formatted. */
var DataFormat;
(function (DataFormat) {
    DataFormat[DataFormat["Default"] = 'default'] = "Default";
    DataFormat[DataFormat["Email"] = 'email'] = "Email";
    DataFormat[DataFormat["Token"] = 'token'] = "Token";
    DataFormat[DataFormat["Path"] = 'path'] = "Path";
    DataFormat[DataFormat["Text"] = 'text'] = "Text";
    DataFormat[DataFormat["Uri"] = 'uri'] = "Uri";
    DataFormat[DataFormat["Omit"] = 'omit'] = "Omit";
    DataFormat[DataFormat["OmitDefault"] = 'omitDefault'] = "OmitDefault";
    DataFormat[DataFormat["Hide"] = 'hide'] = "Hide";
    DataFormat[DataFormat["SingleMember"] = 'singleMember'] = "SingleMember";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
/** Creates a decorator that saves the property format in a map attached to the class constructor. */
function dataFormat(...format) {
    return function (target, propertyKey) {
        if (!target.constructor.dataFormat) {
            target.constructor.dataFormat = {};
        }
        target.constructor.dataFormat[propertyKey] = format;
    };
}
exports.dataFormat = dataFormat;
class Message {
}
exports.Message = Message;
class NotificationMessage extends Message {
}
exports.NotificationMessage = NotificationMessage;
class RequestMessage extends NotificationMessage {
}
exports.RequestMessage = RequestMessage;
class EventArgs {
}
exports.EventArgs = EventArgs;
/** Represents a data object containing attributes needed to access a remote stream. */
class RemoteStreamMoniker {
}
exports.RemoteStreamMoniker = RemoteStreamMoniker;
var SeekOrigin;
(function (SeekOrigin) {
    SeekOrigin[SeekOrigin["Begin"] = 'begin'] = "Begin";
    SeekOrigin[SeekOrigin["Current"] = 'current'] = "Current";
    SeekOrigin[SeekOrigin["End"] = 'end'] = "End";
})(SeekOrigin = exports.SeekOrigin || (exports.SeekOrigin = {}));
class FeatureFlagStore {
}
exports.FeatureFlagStore = FeatureFlagStore;
class MaybeImmutableOfAccessControl {
}
exports.MaybeImmutableOfAccessControl = MaybeImmutableOfAccessControl;
/** Access control */
class AccessControl extends MaybeImmutableOfAccessControl {
}
exports.AccessControl = AccessControl;
/** Event args for an event when access control changes. */
class AccessControlEventArgs extends EventArgs {
}
__decorate([
    dataFormat(AccessControl)
], AccessControlEventArgs.prototype, "accessControl", void 0);
exports.AccessControlEventArgs = AccessControlEventArgs;
class AuthenticationToken {
}
__decorate([
    dataFormat(DataFormat.Text)
], AuthenticationToken.prototype, "token", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], AuthenticationToken.prototype, "code", void 0);
exports.AuthenticationToken = AuthenticationToken;
/** UserAccountInfo represents the minimum information we require in order to retrieve cached credentials in a machine. It purposefully doesn't include the User's Id, as that is unknown at the time of retrieval. */
class UserAccountInfo {
}
__decorate([
    dataFormat(DataFormat.Text)
], UserAccountInfo.prototype, "accountId", void 0);
exports.UserAccountInfo = UserAccountInfo;
class UserInfo extends UserAccountInfo {
}
__decorate([
    dataFormat(DataFormat.Hide)
], UserInfo.prototype, "id", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], UserInfo.prototype, "displayName", void 0);
__decorate([
    dataFormat(DataFormat.Email)
], UserInfo.prototype, "emailAddress", void 0);
__decorate([
    dataFormat(DataFormat.Uri)
], UserInfo.prototype, "avatarUri", void 0);
exports.UserInfo = UserInfo;
var UserAccountStatus;
(function (UserAccountStatus) {
    UserAccountStatus[UserAccountStatus["Unknown"] = 'unknown'] = "Unknown";
    UserAccountStatus[UserAccountStatus["Transient"] = 'transient'] = "Transient";
    UserAccountStatus[UserAccountStatus["Pending"] = 'pending'] = "Pending";
    UserAccountStatus[UserAccountStatus["Accepted"] = 'accepted'] = "Accepted";
    UserAccountStatus[UserAccountStatus["Deleted"] = 'deleted'] = "Deleted";
})(UserAccountStatus = exports.UserAccountStatus || (exports.UserAccountStatus = {}));
class AuthenticationOptions {
}
exports.AuthenticationOptions = AuthenticationOptions;
/** A data object containing charasteristics necessary to establish and configure a broker RPC session. */
class BrokerManifest {
}
exports.BrokerManifest = BrokerManifest;
/** Represents event data associated with certain broker events. */
class BrokerEventArgs extends EventArgs {
}
exports.BrokerEventArgs = BrokerEventArgs;
class AgentVersionInfo {
}
exports.AgentVersionInfo = AgentVersionInfo;
class ClientVersionInfo {
}
exports.ClientVersionInfo = ClientVersionInfo;
class FileListOptions {
}
exports.FileListOptions = FileListOptions;
/** Specifies what descendents should be included when listing or watching a path. */
var FileRecurseMode;
(function (FileRecurseMode) {
    FileRecurseMode[FileRecurseMode["None"] = 'none'] = "None";
    FileRecurseMode[FileRecurseMode["Children"] = 'children'] = "Children";
    FileRecurseMode[FileRecurseMode["SingleChildDescendants"] = 'singleChildDescendants'] = "SingleChildDescendants";
    FileRecurseMode[FileRecurseMode["AllDescendants"] = 'allDescendants'] = "AllDescendants";
})(FileRecurseMode = exports.FileRecurseMode || (exports.FileRecurseMode = {}));
var FileAttributes;
(function (FileAttributes) {
    FileAttributes[FileAttributes["None"] = 'none'] = "None";
    FileAttributes[FileAttributes["Hidden"] = 'hidden'] = "Hidden";
    FileAttributes[FileAttributes["ReadOnly"] = 'readOnly'] = "ReadOnly";
})(FileAttributes = exports.FileAttributes || (exports.FileAttributes = {}));
class FileInfo {
    constructor() {
        this.exists = true;
    }
}
__decorate([
    dataFormat(DataFormat.Path)
], FileInfo.prototype, "path", void 0);
__decorate([
    dataFormat(FileInfo)
], FileInfo.prototype, "children", void 0);
exports.FileInfo = FileInfo;
class FileRootInfo extends FileInfo {
}
__decorate([
    dataFormat(DataFormat.Path)
], FileRootInfo.prototype, "localPath", void 0);
exports.FileRootInfo = FileRootInfo;
class FileTextInfo extends FileInfo {
}
__decorate([
    dataFormat(DataFormat.Text)
], FileTextInfo.prototype, "text", void 0);
exports.FileTextInfo = FileTextInfo;
class FileStreamInfo extends FileInfo {
}
exports.FileStreamInfo = FileStreamInfo;
class FileReadOptions {
}
exports.FileReadOptions = FileReadOptions;
class FileWriteOptions {
}
exports.FileWriteOptions = FileWriteOptions;
class FileMoveOptions {
}
exports.FileMoveOptions = FileMoveOptions;
class FileDeleteOptions {
}
exports.FileDeleteOptions = FileDeleteOptions;
class FileWatchOptions {
}
exports.FileWatchOptions = FileWatchOptions;
class FileChange {
}
__decorate([
    dataFormat(DataFormat.Path)
], FileChange.prototype, "path", void 0);
__decorate([
    dataFormat(DataFormat.Path)
], FileChange.prototype, "fullPath", void 0);
exports.FileChange = FileChange;
var FileChangeType;
(function (FileChangeType) {
    FileChangeType[FileChangeType["None"] = 'none'] = "None";
    FileChangeType[FileChangeType["Updated"] = 'updated'] = "Updated";
    FileChangeType[FileChangeType["Added"] = 'added'] = "Added";
    FileChangeType[FileChangeType["Deleted"] = 'deleted'] = "Deleted";
})(FileChangeType = exports.FileChangeType || (exports.FileChangeType = {}));
class FilesChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.changes = [];
    }
}
__decorate([
    dataFormat(FileChange)
], FilesChangedEventArgs.prototype, "changes", void 0);
exports.FilesChangedEventArgs = FilesChangedEventArgs;
class DiffBaseInfo {
}
__decorate([
    dataFormat(DataFormat.Text)
], DiffBaseInfo.prototype, "description", void 0);
exports.DiffBaseInfo = DiffBaseInfo;
class TextSearchResult {
}
__decorate([
    dataFormat(DataFormat.Path)
], TextSearchResult.prototype, "path", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], TextSearchResult.prototype, "text", void 0);
exports.TextSearchResult = TextSearchResult;
class TextSearchOptions {
}
__decorate([
    dataFormat(DataFormat.Text)
], TextSearchOptions.prototype, "fileIncludes", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], TextSearchOptions.prototype, "fileExcludes", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], TextSearchOptions.prototype, "pattern", void 0);
exports.TextSearchOptions = TextSearchOptions;
var FirewallStatus;
(function (FirewallStatus) {
    FirewallStatus[FirewallStatus["None"] = 'none'] = "None";
    FirewallStatus[FirewallStatus["Allow"] = 'allow'] = "Allow";
    FirewallStatus[FirewallStatus["Block"] = 'block'] = "Block";
})(FirewallStatus = exports.FirewallStatus || (exports.FirewallStatus = {}));
/** Shared server info. StreamName and Condition can be used to get the streams from CancellationToken). */
class SharedServer {
}
__decorate([
    dataFormat(DataFormat.Uri)
], SharedServer.prototype, "browseUrl", void 0);
exports.SharedServer = SharedServer;
/** Event args for an event when a new server is shared. */
class ServerSharingStartedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.server = new SharedServer();
    }
}
__decorate([
    dataFormat(SharedServer)
], ServerSharingStartedEventArgs.prototype, "server", void 0);
exports.ServerSharingStartedEventArgs = ServerSharingStartedEventArgs;
/** Event args for an event when a server is no longer shared. */
class ServerSharingStoppedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.server = new SharedServer();
    }
}
__decorate([
    dataFormat(SharedServer)
], ServerSharingStoppedEventArgs.prototype, "server", void 0);
exports.ServerSharingStoppedEventArgs = ServerSharingStoppedEventArgs;
/** Event args for an event when a server is updated. */
class ServerSharingChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.server = new SharedServer();
    }
}
__decorate([
    dataFormat(SharedServer)
], ServerSharingChangedEventArgs.prototype, "server", void 0);
exports.ServerSharingChangedEventArgs = ServerSharingChangedEventArgs;
class SessionUpdateEventArgs extends EventArgs {
}
exports.SessionUpdateEventArgs = SessionUpdateEventArgs;
/** Types of nodes present in a solution view */
class NodeType {
}
exports.NodeType = NodeType;
/** Represents a node in solution view */
class SolutionWorkspaceNode {
}
exports.SolutionWorkspaceNode = SolutionWorkspaceNode;
class SourceEventArgs extends EventArgs {
}
__decorate([
    dataFormat(DataFormat.Hide)
], SourceEventArgs.prototype, "jsonContent", void 0);
exports.SourceEventArgs = SourceEventArgs;
var StreamTraits;
(function (StreamTraits) {
    StreamTraits[StreamTraits["None"] = 'none'] = "None";
    StreamTraits[StreamTraits["CanRead"] = 'canRead'] = "CanRead";
    StreamTraits[StreamTraits["CanWrite"] = 'canWrite'] = "CanWrite";
    StreamTraits[StreamTraits["CanSeek"] = 'canSeek'] = "CanSeek";
})(StreamTraits = exports.StreamTraits || (exports.StreamTraits = {}));
/** A content type of a task output or feed. */
var TaskOutputContentType;
(function (TaskOutputContentType) {
    TaskOutputContentType[TaskOutputContentType["PlainText"] = 'plainText'] = "PlainText";
    TaskOutputContentType[TaskOutputContentType["TextWithAnsiEscapeCodes"] = 'textWithAnsiEscapeCodes'] = "TextWithAnsiEscapeCodes";
})(TaskOutputContentType = exports.TaskOutputContentType || (exports.TaskOutputContentType = {}));
/** Single task execution feed */
class TaskOutputFeedInfo {
}
__decorate([
    dataFormat(RemoteStreamMoniker)
], TaskOutputFeedInfo.prototype, "streamMoniker", void 0);
exports.TaskOutputFeedInfo = TaskOutputFeedInfo;
/** Options pertaining to a task output */
class TaskOutputOptions {
}
exports.TaskOutputOptions = TaskOutputOptions;
/** Represents a task output, typically associated with a output or terminal window in IDE. It can be used to send ouput from task execution feeds. Only one feed can be active. */
class TaskOutputInfo {
}
__decorate([
    dataFormat(TaskOutputFeedInfo)
], TaskOutputInfo.prototype, "feed", void 0);
__decorate([
    dataFormat(TaskOutputOptions)
], TaskOutputInfo.prototype, "options", void 0);
exports.TaskOutputInfo = TaskOutputInfo;
/** Represents an event data sent with a task output event. */
class TaskOutputEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.taskOutput = new TaskOutputInfo();
    }
}
__decorate([
    dataFormat(TaskOutputInfo)
], TaskOutputEventArgs.prototype, "taskOutput", void 0);
exports.TaskOutputEventArgs = TaskOutputEventArgs;
class TelemetrySettings {
}
exports.TelemetrySettings = TelemetrySettings;
class GenericOperationEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        /** The payload of the operation */
        this.payload = {};
    }
}
__decorate([
    dataFormat(DataFormat.Omit)
], GenericOperationEventArgs.prototype, "payload", void 0);
exports.GenericOperationEventArgs = GenericOperationEventArgs;
/** An enum to define the result from user task or operation. */
var TelemetryResult;
(function (TelemetryResult) {
    TelemetryResult[TelemetryResult["None"] = 'none'] = "None";
    TelemetryResult[TelemetryResult["Success"] = 'success'] = "Success";
    TelemetryResult[TelemetryResult["Failure"] = 'failure'] = "Failure";
    TelemetryResult[TelemetryResult["UserFault"] = 'userFault'] = "UserFault";
    TelemetryResult[TelemetryResult["UserCancel"] = 'userCancel'] = "UserCancel";
})(TelemetryResult = exports.TelemetryResult || (exports.TelemetryResult = {}));
/** Options that control how terminal is started */
class TerminalOptions {
}
__decorate([
    dataFormat(DataFormat.Path)
], TerminalOptions.prototype, "cwd", void 0);
__decorate([
    dataFormat(DataFormat.Path)
], TerminalOptions.prototype, "app", void 0);
__decorate([
    dataFormat(DataFormat.Hide)
], TerminalOptions.prototype, "commandLine", void 0);
__decorate([
    dataFormat(DataFormat.Omit)
], TerminalOptions.prototype, "verbatimCommandLine", void 0);
__decorate([
    dataFormat(DataFormat.Omit)
], TerminalOptions.prototype, "environment", void 0);
exports.TerminalOptions = TerminalOptions;
/** Info on running terminal */
class TerminalInfo {
}
__decorate([
    dataFormat(TerminalOptions)
], TerminalInfo.prototype, "options", void 0);
exports.TerminalInfo = TerminalInfo;
/** Event args for notification for a terminal */
class TerminalEventArgs extends EventArgs {
}
__decorate([
    dataFormat(TerminalInfo)
], TerminalEventArgs.prototype, "terminal", void 0);
exports.TerminalEventArgs = TerminalEventArgs;
/** A class that describes a restricted operation which is controlled by access control. By default, the operation is disabled in read-only session. */
class RestrictedOperation {
}
exports.RestrictedOperation = RestrictedOperation;
/** Restricted operation for a specific terminal */
class SharedTerminalRestrictedOperation extends RestrictedOperation {
}
exports.SharedTerminalRestrictedOperation = SharedTerminalRestrictedOperation;
class MaybeImmutableOfWorkspaceAccessControl {
}
exports.MaybeImmutableOfWorkspaceAccessControl = MaybeImmutableOfWorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControl extends MaybeImmutableOfWorkspaceAccessControl {
}
__decorate([
    dataFormat(AccessControl)
], WorkspaceAccessControl.prototype, "defaultAccessControl", void 0);
exports.WorkspaceAccessControl = WorkspaceAccessControl;
/** Event args for an event when user access control changes. */
class WorkspaceAccessControlEventArgs extends EventArgs {
}
__decorate([
    dataFormat(WorkspaceAccessControl)
], WorkspaceAccessControlEventArgs.prototype, "accessControl", void 0);
exports.WorkspaceAccessControlEventArgs = WorkspaceAccessControlEventArgs;
/** Event args for an event when a guest requests access to a restricted operation. */
class RestrictedOperationAccessRequestedEventArgs extends EventArgs {
}
__decorate([
    dataFormat(RestrictedOperation)
], RestrictedOperationAccessRequestedEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessRequestedEventArgs = RestrictedOperationAccessRequestedEventArgs;
/** Event args for an event when a restricted operation has failed. */
class RestrictedOperationAccessEventArgs extends EventArgs {
}
__decorate([
    dataFormat(RestrictedOperation)
], RestrictedOperationAccessEventArgs.prototype, "operation", void 0);
exports.RestrictedOperationAccessEventArgs = RestrictedOperationAccessEventArgs;
/** Access for a restricted operation. */
var RestrictedOperationAccess;
(function (RestrictedOperationAccess) {
    RestrictedOperationAccess[RestrictedOperationAccess["Allowed"] = 'allowed'] = "Allowed";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedInReadOnlySession"] = 'rejectedInReadOnlySession'] = "RejectedInReadOnlySession";
    RestrictedOperationAccess[RestrictedOperationAccess["RejectedForNotOwner"] = 'rejectedForNotOwner'] = "RejectedForNotOwner";
    RestrictedOperationAccess[RestrictedOperationAccess["DisabledByHostConfiguration"] = 'disabledByHostConfiguration'] = "DisabledByHostConfiguration";
    RestrictedOperationAccess[RestrictedOperationAccess["ExplicitlyRejectedByHost"] = 'explicitlyRejectedByHost'] = "ExplicitlyRejectedByHost";
})(RestrictedOperationAccess = exports.RestrictedOperationAccess || (exports.RestrictedOperationAccess = {}));
/** Represents severity of an error reported by a workspace task. */
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity[ErrorSeverity["Error"] = 'error'] = "Error";
    ErrorSeverity[ErrorSeverity["Warning"] = 'warning'] = "Warning";
    ErrorSeverity[ErrorSeverity["Message"] = 'message'] = "Message";
})(ErrorSeverity = exports.ErrorSeverity || (exports.ErrorSeverity = {}));
/** An entry representing error, warning or message generated by a workspace task */
class DiagnosticEntry {
}
__decorate([
    dataFormat(DataFormat.Path)
], DiagnosticEntry.prototype, "fileId", void 0);
__decorate([
    dataFormat(DataFormat.Hide)
], DiagnosticEntry.prototype, "message", void 0);
__decorate([
    dataFormat(DataFormat.Omit)
], DiagnosticEntry.prototype, "properties", void 0);
exports.DiagnosticEntry = DiagnosticEntry;
/** Describes a diagnostic data event containing a collection of diagnostic entries emitted by a workspace task. */
class DiagnosticDataChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.entries = [];
    }
}
__decorate([
    dataFormat(DiagnosticEntry)
], DiagnosticDataChangedEventArgs.prototype, "entries", void 0);
exports.DiagnosticDataChangedEventArgs = DiagnosticDataChangedEventArgs;
class WorkspaceInfo {
}
__decorate([
    dataFormat(DataFormat.Text)
], WorkspaceInfo.prototype, "name", void 0);
__decorate([
    dataFormat(DataFormat.Omit)
], WorkspaceInfo.prototype, "joinUri", void 0);
__decorate([
    dataFormat(DataFormat.Omit)
], WorkspaceInfo.prototype, "ownerId", void 0);
exports.WorkspaceInfo = WorkspaceInfo;
var WorkspaceConnectionStatus;
(function (WorkspaceConnectionStatus) {
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unknown"] = 'unknown'] = "Unknown";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Available"] = 'available'] = "Available";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Unavailable"] = 'unavailable'] = "Unavailable";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Connected"] = 'connected'] = "Connected";
    WorkspaceConnectionStatus[WorkspaceConnectionStatus["Disconnected"] = 'disconnected'] = "Disconnected";
})(WorkspaceConnectionStatus = exports.WorkspaceConnectionStatus || (exports.WorkspaceConnectionStatus = {}));
var WorkspaceDisconnectedReason;
(function (WorkspaceDisconnectedReason) {
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["None"] = 'none'] = "None";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["Requested"] = 'requested'] = "Requested";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["UserRemoved"] = 'userRemoved'] = "UserRemoved";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionEnded"] = 'sessionEnded'] = "SessionEnded";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ConnectionLost"] = 'connectionLost'] = "ConnectionLost";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["InternalError"] = 'internalError'] = "InternalError";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["SessionExpired"] = 'sessionExpired'] = "SessionExpired";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["NetworkDisconnected"] = 'networkDisconnected'] = "NetworkDisconnected";
    WorkspaceDisconnectedReason[WorkspaceDisconnectedReason["ListenerWentOffline"] = 'listenerWentOffline'] = "ListenerWentOffline";
})(WorkspaceDisconnectedReason = exports.WorkspaceDisconnectedReason || (exports.WorkspaceDisconnectedReason = {}));
class WorkspaceConnectionStatusChangedEventArgs extends EventArgs {
}
exports.WorkspaceConnectionStatusChangedEventArgs = WorkspaceConnectionStatusChangedEventArgs;
var WorkspaceProgress;
(function (WorkspaceProgress) {
    WorkspaceProgress[WorkspaceProgress["None"] = 'none'] = "None";
    WorkspaceProgress[WorkspaceProgress["CreatedWorkspace"] = 'createdWorkspace'] = "CreatedWorkspace";
    WorkspaceProgress[WorkspaceProgress["InitializedAgentServices"] = 'initializedAgentServices'] = "InitializedAgentServices";
    WorkspaceProgress[WorkspaceProgress["InitializedRelayAndTCP"] = 'initializedRelayAndTCP'] = "InitializedRelayAndTCP";
    WorkspaceProgress[WorkspaceProgress["AddedUserToWorkspace"] = 'addedUserToWorkspace'] = "AddedUserToWorkspace";
    WorkspaceProgress[WorkspaceProgress["JoinedLocalWorkspace"] = 'joinedLocalWorkspace'] = "JoinedLocalWorkspace";
    WorkspaceProgress[WorkspaceProgress["ReadWorkspaceInfo"] = 'readWorkspaceInfo'] = "ReadWorkspaceInfo";
    WorkspaceProgress[WorkspaceProgress["OpeningRemoteSession"] = 'openingRemoteSession'] = "OpeningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["OpenedRemoteSession"] = 'openedRemoteSession'] = "OpenedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoiningRemoteSession"] = 'joiningRemoteSession'] = "JoiningRemoteSession";
    WorkspaceProgress[WorkspaceProgress["JoinedRemoteSession"] = 'joinedRemoteSession'] = "JoinedRemoteSession";
    WorkspaceProgress[WorkspaceProgress["WaitingForHost"] = 'waitingForHost'] = "WaitingForHost";
    WorkspaceProgress[WorkspaceProgress["DoneWaitingForHost"] = 'doneWaitingForHost'] = "DoneWaitingForHost";
})(WorkspaceProgress = exports.WorkspaceProgress || (exports.WorkspaceProgress = {}));
class WorkspaceProgressEventArgs extends EventArgs {
}
exports.WorkspaceProgressEventArgs = WorkspaceProgressEventArgs;
class WorkspaceShareInfo extends WorkspaceInfo {
    constructor() {
        super(...arguments);
        this.rootDirectories = [];
    }
}
__decorate([
    dataFormat(DataFormat.Path)
], WorkspaceShareInfo.prototype, "rootDirectories", void 0);
exports.WorkspaceShareInfo = WorkspaceShareInfo;
/** Defines the ways that an RPC caller can connect to a workspace when joining. */
var ConnectionMode;
(function (ConnectionMode) {
    ConnectionMode[ConnectionMode["Auto"] = 'auto'] = "Auto";
    ConnectionMode[ConnectionMode["Direct"] = 'direct'] = "Direct";
    ConnectionMode[ConnectionMode["Relay"] = 'relay'] = "Relay";
    ConnectionMode[ConnectionMode["Local"] = 'local'] = "Local";
})(ConnectionMode = exports.ConnectionMode || (exports.ConnectionMode = {}));
class ClientCapabilities {
}
exports.ClientCapabilities = ClientCapabilities;
class WorkspaceJoinInfo {
}
__decorate([
    dataFormat(DataFormat.Text)
], WorkspaceJoinInfo.prototype, "directAddress", void 0);
__decorate([
    dataFormat(DataFormat.Text)
], WorkspaceJoinInfo.prototype, "relayAddress", void 0);
__decorate([
    dataFormat(DataFormat.Token)
], WorkspaceJoinInfo.prototype, "relaySharedAccessSignature", void 0);
__decorate([
    dataFormat(DataFormat.Token)
], WorkspaceJoinInfo.prototype, "joiningUserSessionToken", void 0);
__decorate([
    dataFormat(ClientCapabilities)
], WorkspaceJoinInfo.prototype, "clientCapabilities", void 0);
exports.WorkspaceJoinInfo = WorkspaceJoinInfo;
class WorkspaceListOptions {
    constructor() {
        /** Optionally include remote workspaces. */
        this.includeRemoteWorkspaces = true;
    }
}
exports.WorkspaceListOptions = WorkspaceListOptions;
class WorkspaceSessionInfo extends WorkspaceInfo {
}
exports.WorkspaceSessionInfo = WorkspaceSessionInfo;
class WorkspaceUserProfile {
}
__decorate([
    dataFormat(DataFormat.Text)
], WorkspaceUserProfile.prototype, "name", void 0);
__decorate([
    dataFormat(DataFormat.Email)
], WorkspaceUserProfile.prototype, "email", void 0);
__decorate([
    dataFormat(DataFormat.Uri)
], WorkspaceUserProfile.prototype, "avatarUri", void 0);
__decorate([
    dataFormat(ClientCapabilities)
], WorkspaceUserProfile.prototype, "clientCapabilities", void 0);
exports.WorkspaceUserProfile = WorkspaceUserProfile;
var WorkspaceServicesChangeType;
(function (WorkspaceServicesChangeType) {
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["None"] = 'none'] = "None";
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["Add"] = 'add'] = "Add";
    WorkspaceServicesChangeType[WorkspaceServicesChangeType["Remove"] = 'remove'] = "Remove";
})(WorkspaceServicesChangeType = exports.WorkspaceServicesChangeType || (exports.WorkspaceServicesChangeType = {}));
class WorkspaceServicesChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.serviceNames = [];
    }
}
exports.WorkspaceServicesChangedEventArgs = WorkspaceServicesChangedEventArgs;
/** The scope a task is associated with */
var TaskScope;
(function (TaskScope) {
    TaskScope[TaskScope["Global"] = 'global'] = "Global";
    TaskScope[TaskScope["Workspace"] = 'workspace'] = "Workspace";
    TaskScope[TaskScope["WorkspaceFolder"] = 'workspaceFolder'] = "WorkspaceFolder";
})(TaskScope = exports.TaskScope || (exports.TaskScope = {}));
/** Represents a task declared in a collaboration workspace. Examples: build, publish, pack, lint, etc. */
class WorkspaceTask {
}
exports.WorkspaceTask = WorkspaceTask;
/** Represents a task execution. Any single task may be executed multiple times. Each execution will receive a new moniker with unique ID. */
class TaskExecutionMoniker {
}
exports.TaskExecutionMoniker = TaskExecutionMoniker;
/** Event occured to a task that may lead to a task state change. */
var TaskExecutionStatusChange;
(function (TaskExecutionStatusChange) {
    TaskExecutionStatusChange[TaskExecutionStatusChange["Started"] = 'started'] = "Started";
    TaskExecutionStatusChange[TaskExecutionStatusChange["Terminated"] = 'terminated'] = "Terminated";
})(TaskExecutionStatusChange = exports.TaskExecutionStatusChange || (exports.TaskExecutionStatusChange = {}));
/** Message sent by a remote task to signal change in the status. */
class TaskExecutionStatusEventArgs extends EventArgs {
}
__decorate([
    dataFormat(TaskExecutionMoniker)
], TaskExecutionStatusEventArgs.prototype, "taskExecution", void 0);
__decorate([
    dataFormat(WorkspaceTask)
], TaskExecutionStatusEventArgs.prototype, "task", void 0);
exports.TaskExecutionStatusEventArgs = TaskExecutionStatusEventArgs;
/** List of statuses produced by IWorkspaceTaskService in response to start a task execution. */
var RunTaskStatus;
(function (RunTaskStatus) {
    RunTaskStatus[RunTaskStatus["Started"] = 'started'] = "Started";
    RunTaskStatus[RunTaskStatus["AlreadyRunning"] = 'alreadyRunning'] = "AlreadyRunning";
    RunTaskStatus[RunTaskStatus["RetryLater"] = 'retryLater'] = "RetryLater";
    RunTaskStatus[RunTaskStatus["TaskNotFound"] = 'taskNotFound'] = "TaskNotFound";
    RunTaskStatus[RunTaskStatus["RejectedByHost"] = 'rejectedByHost'] = "RejectedByHost";
})(RunTaskStatus = exports.RunTaskStatus || (exports.RunTaskStatus = {}));
/** Represents a result of a run task operation. */
class RunTaskResult {
}
__decorate([
    dataFormat(TaskExecutionMoniker)
], RunTaskResult.prototype, "taskExecution", void 0);
exports.RunTaskResult = RunTaskResult;
var WorkspaceSessionChangeType;
(function (WorkspaceSessionChangeType) {
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["None"] = 'none'] = "None";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Joined"] = 'joined'] = "Joined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Unjoined"] = 'unjoined'] = "Unjoined";
    WorkspaceSessionChangeType[WorkspaceSessionChangeType["Canceled"] = 'canceled'] = "Canceled";
})(WorkspaceSessionChangeType = exports.WorkspaceSessionChangeType || (exports.WorkspaceSessionChangeType = {}));
class WorkspaceSessionChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.userProfile = new WorkspaceUserProfile();
    }
}
__decorate([
    dataFormat(WorkspaceUserProfile)
], WorkspaceSessionChangedEventArgs.prototype, "userProfile", void 0);
exports.WorkspaceSessionChangedEventArgs = WorkspaceSessionChangedEventArgs;
class UserSettings {
}
__decorate([
    dataFormat(FeatureFlagStore)
], UserSettings.prototype, "experimentalFeatures", void 0);
exports.UserSettings = UserSettings;
class TextChange {
}
__decorate([
    dataFormat(DataFormat.Text)
], TextChange.prototype, "newText", void 0);
exports.TextChange = TextChange;
class MessageBase {
    constructor() {
        this.messageType = MessageType.Unknown;
    }
}
exports.MessageBase = MessageBase;
var MessageType;
(function (MessageType) {
    MessageType[MessageType["SelectionChange"] = 'selectionChange'] = "SelectionChange";
    MessageType[MessageType["TextChange"] = 'textChange'] = "TextChange";
    MessageType[MessageType["FileOpenRequest"] = 'fileOpenRequest'] = "FileOpenRequest";
    MessageType[MessageType["FileOpenAcknowledge"] = 'fileOpenAcknowledge'] = "FileOpenAcknowledge";
    MessageType[MessageType["FileRelease"] = 'fileRelease'] = "FileRelease";
    MessageType[MessageType["SaveFile"] = 'saveFile'] = "SaveFile";
    MessageType[MessageType["JoinRequest"] = 'joinRequest'] = "JoinRequest";
    MessageType[MessageType["JoinAcknowledge"] = 'joinAcknowledge'] = "JoinAcknowledge";
    MessageType[MessageType["ReadOnlyChange"] = 'readOnlyChange'] = "ReadOnlyChange";
    MessageType[MessageType["Handshake"] = 'handshake'] = "Handshake";
    MessageType[MessageType["Summon"] = 'summon'] = "Summon";
    MessageType[MessageType["LayoutScroll"] = 'layoutScroll'] = "LayoutScroll";
    MessageType[MessageType["Unknown"] = 'unknown'] = "Unknown";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
class FileMessageBase extends MessageBase {
}
__decorate([
    dataFormat(DataFormat.Path)
], FileMessageBase.prototype, "fileName", void 0);
exports.FileMessageBase = FileMessageBase;
class JoinRequestMessage extends MessageBase {
}
exports.JoinRequestMessage = JoinRequestMessage;
class JoinAcknowledgeMessage extends MessageBase {
}
__decorate([
    dataFormat(DataFormat.Path)
], JoinAcknowledgeMessage.prototype, "files", void 0);
exports.JoinAcknowledgeMessage = JoinAcknowledgeMessage;
class SelectionChangeMessage extends FileMessageBase {
}
exports.SelectionChangeMessage = SelectionChangeMessage;
class LayoutScrollMessage extends FileMessageBase {
}
exports.LayoutScrollMessage = LayoutScrollMessage;
class FileOpenRequestMessage extends FileMessageBase {
}
exports.FileOpenRequestMessage = FileOpenRequestMessage;
class HandshakeMessage extends FileMessageBase {
}
exports.HandshakeMessage = HandshakeMessage;
class SaveFileMessage extends FileMessageBase {
}
exports.SaveFileMessage = SaveFileMessage;
class FileReleaseMessage extends FileMessageBase {
}
exports.FileReleaseMessage = FileReleaseMessage;
class TextChangeMessage extends FileMessageBase {
}
__decorate([
    dataFormat(TextChange)
], TextChangeMessage.prototype, "changes", void 0);
exports.TextChangeMessage = TextChangeMessage;
class ReadOnlyChangeMessage extends FileMessageBase {
}
exports.ReadOnlyChangeMessage = ReadOnlyChangeMessage;
class ServerVersionSnapshot {
}
__decorate([
    dataFormat(TextChangeMessage)
], ServerVersionSnapshot.prototype, "message", void 0);
exports.ServerVersionSnapshot = ServerVersionSnapshot;
class FileOpenAcknowledgeMessage extends FileMessageBase {
}
__decorate([
    dataFormat(ServerVersionSnapshot)
], FileOpenAcknowledgeMessage.prototype, "history", void 0);
exports.FileOpenAcknowledgeMessage = FileOpenAcknowledgeMessage;
class SummonMessage extends MessageBase {
}
exports.SummonMessage = SummonMessage;
class CoeditingInformation {
}
exports.CoeditingInformation = CoeditingInformation;
class LanguageServerRequest {
    constructor() {
        this.request = new RequestMessage();
    }
}
__decorate([
    dataFormat(RequestMessage)
], LanguageServerRequest.prototype, "request", void 0);
__decorate([
    dataFormat(CoeditingInformation)
], LanguageServerRequest.prototype, "coeditingInfo", void 0);
exports.LanguageServerRequest = LanguageServerRequest;
class DocumentFilter {
}
exports.DocumentFilter = DocumentFilter;
class LanguageServerProviderMetadata {
}
__decorate([
    dataFormat(DocumentFilter)
], LanguageServerProviderMetadata.prototype, "documentFilters", void 0);
exports.LanguageServerProviderMetadata = LanguageServerProviderMetadata;
class NotificationEventArgs extends EventArgs {
}
__decorate([
    dataFormat(NotificationMessage)
], NotificationEventArgs.prototype, "body", void 0);
exports.NotificationEventArgs = NotificationEventArgs;
class DebugSession {
}
exports.DebugSession = DebugSession;
var DebugSessionChangeType;
(function (DebugSessionChangeType) {
    DebugSessionChangeType[DebugSessionChangeType["None"] = 'none'] = "None";
    DebugSessionChangeType[DebugSessionChangeType["Add"] = 'add'] = "Add";
    DebugSessionChangeType[DebugSessionChangeType["Remove"] = 'remove'] = "Remove";
})(DebugSessionChangeType = exports.DebugSessionChangeType || (exports.DebugSessionChangeType = {}));
class DebugSessionChangedEventArgs extends EventArgs {
    constructor() {
        super(...arguments);
        this.debugSession = new DebugSession();
    }
}
__decorate([
    dataFormat(DebugSession)
], DebugSessionChangedEventArgs.prototype, "debugSession", void 0);
exports.DebugSessionChangedEventArgs = DebugSessionChangedEventArgs;
class LaunchConfigurationChangedEventArgs extends EventArgs {
}
exports.LaunchConfigurationChangedEventArgs = LaunchConfigurationChangedEventArgs;
var ContinueReason;
(function (ContinueReason) {
    ContinueReason[ContinueReason["Go"] = 'go'] = "Go";
    ContinueReason[ContinueReason["StepIn"] = 'stepIn'] = "StepIn";
    ContinueReason[ContinueReason["StepOut"] = 'stepOut'] = "StepOut";
    ContinueReason[ContinueReason["StepOver"] = 'stepOver'] = "StepOver";
})(ContinueReason = exports.ContinueReason || (exports.ContinueReason = {}));
var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes[ErrorCodes["CouldNotConnectToServer"] = -32000] = "CouldNotConnectToServer";
    ErrorCodes[ErrorCodes["OlderThanServer"] = -32001] = "OlderThanServer";
    ErrorCodes[ErrorCodes["NewerThanServer"] = -32002] = "NewerThanServer";
    ErrorCodes[ErrorCodes["OlderThanPeer"] = -32003] = "OlderThanPeer";
    ErrorCodes[ErrorCodes["NewerThanPeer"] = -32004] = "NewerThanPeer";
    ErrorCodes[ErrorCodes["OlderThanAgent"] = -32005] = "OlderThanAgent";
    ErrorCodes[ErrorCodes["NewerThanAgent"] = -32006] = "NewerThanAgent";
    ErrorCodes[ErrorCodes["NoIPAddressesDetected"] = -32010] = "NoIPAddressesDetected";
    ErrorCodes[ErrorCodes["NoConnectionAddresses"] = -32011] = "NoConnectionAddresses";
    ErrorCodes[ErrorCodes["AutoConnectionFailed"] = -32012] = "AutoConnectionFailed";
    ErrorCodes[ErrorCodes["RelayConnectionFailed"] = -32013] = "RelayConnectionFailed";
    ErrorCodes[ErrorCodes["DirectConnectionFailed"] = -32014] = "DirectConnectionFailed";
    ErrorCodes[ErrorCodes["SessionProtocolError"] = -32015] = "SessionProtocolError";
    ErrorCodes[ErrorCodes["SessionAuthenticationFailed"] = -32016] = "SessionAuthenticationFailed";
    ErrorCodes[ErrorCodes["DirectConnectionNotEnabled"] = -32020] = "DirectConnectionNotEnabled";
    ErrorCodes[ErrorCodes["RelayConnectionNotEnabled"] = -32021] = "RelayConnectionNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionUsersLimitReached"] = -32022] = "CollaborationSessionUsersLimitReached";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejected"] = -32023] = "CollaborationSessionGuestRejected";
    ErrorCodes[ErrorCodes["CollaborationSessionRequestTimedOut"] = -32024] = "CollaborationSessionRequestTimedOut";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestCanceled"] = -32025] = "CollaborationSessionGuestCanceled";
    ErrorCodes[ErrorCodes["CollaborationSessionNotFound"] = -32026] = "CollaborationSessionNotFound";
    ErrorCodes[ErrorCodes["CollaborationSessionEnded"] = -32027] = "CollaborationSessionEnded";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestBlocked"] = -32028] = "CollaborationSessionGuestBlocked";
    ErrorCodes[ErrorCodes["NonSuccessHttpStatusCodeReceived"] = -32030] = "NonSuccessHttpStatusCodeReceived";
    ErrorCodes[ErrorCodes["KeychainAccessFailed"] = -32031] = "KeychainAccessFailed";
    ErrorCodes[ErrorCodes["UnauthorizedHttpStatusCode"] = -32032] = "UnauthorizedHttpStatusCode";
    ErrorCodes[ErrorCodes["RelayConnectionHostFailure"] = -32040] = "RelayConnectionHostFailure";
    ErrorCodes[ErrorCodes["RelayConnectionGuestFailure"] = -32041] = "RelayConnectionGuestFailure";
    ErrorCodes[ErrorCodes["BrokerNotAuthorized"] = -32050] = "BrokerNotAuthorized";
    ErrorCodes[ErrorCodes["RemoteLaunchNotEnabled"] = -32200] = "RemoteLaunchNotEnabled";
    ErrorCodes[ErrorCodes["CollaborationSessionGuestRejectedWithSpecificReason"] = -32300] = "CollaborationSessionGuestRejectedWithSpecificReason";
    ErrorCodes[ErrorCodes["OperationRejected"] = -32400] = "OperationRejected";
    ErrorCodes[ErrorCodes["OperationRejectedInReadOnlySession"] = -32401] = "OperationRejectedInReadOnlySession";
    ErrorCodes[ErrorCodes["OperationRejectedForNotOwner"] = -32402] = "OperationRejectedForNotOwner";
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
var TraceEventIds;
(function (TraceEventIds) {
    TraceEventIds[TraceEventIds["None"] = 0] = "None";
    TraceEventIds[TraceEventIds["RpcListeningOnPipe"] = 1001] = "RpcListeningOnPipe";
    TraceEventIds[TraceEventIds["AgentLogCreated"] = 1002] = "AgentLogCreated";
    TraceEventIds[TraceEventIds["AgentOutput"] = 2001] = "AgentOutput";
})(TraceEventIds = exports.TraceEventIds || (exports.TraceEventIds = {}));
var TraceSources;
(function (TraceSources) {
    TraceSources["Agent"] = "Agent";
    TraceSources["AgentAuth"] = "Agent.Auth";
    TraceSources["AgentCSharpLS"] = "Agent.CSharpLS";
    TraceSources["AgentFile"] = "Agent.File";
    TraceSources["AgentFirewall"] = "Agent.Firewall";
    TraceSources["AgentHttp"] = "Agent.Http";
    TraceSources["AgentProxy"] = "Agent.Proxy";
    TraceSources["AgentPortForwarding"] = "Agent.PortFowrading";
    TraceSources["AgentRpc"] = "Agent.Rpc";
    TraceSources["AgentRpcAuth"] = "Agent.Rpc.Auth";
    TraceSources["AgentRpcFile"] = "Agent.Rpc.File";
    TraceSources["AgentRpcFirewall"] = "Agent.Rpc.Firewall";
    TraceSources["AgentRpcServerSharing"] = "Agent.Rpc.ServerSharing";
    TraceSources["AgentRpcSourceEvent"] = "Agent.Rpc.SourceEvent";
    TraceSources["AgentRpcStream"] = "Agent.Rpc.Stream";
    TraceSources["AgentRpcStreamManager"] = "Agent.Rpc.StreamManager";
    TraceSources["AgentRpcStreamTransport"] = "Agent.Rpc.StreamTransport";
    TraceSources["AgentRpcTerminal"] = "Agent.Rpc.Terminal";
    TraceSources["AgentTerminalConnection"] = "Agent.Terminal.Connection";
    TraceSources["AgentRpcWorkspace"] = "Agent.Rpc.Workspace";
    TraceSources["AgentRpcWorkspaceUser"] = "Agent.Rpc.WorkspaceUser";
    TraceSources["AgentRpcTaskOutput"] = "Agent.Rpc.TaskOutput";
    TraceSources["AgentSsh"] = "Agent.Ssh";
    TraceSources["AgentTSLS"] = "Agent.TSLS";
    TraceSources["AgentWorkspace"] = "Agent.Workspace";
    TraceSources["AgentWorkspaceSessionAccessControl"] = "Agent.WorkspaceSession.AccessControl";
    TraceSources["ClientAgent"] = "Client.Agent";
    TraceSources["ClientCoEditing"] = "Client.CoEditing";
    TraceSources["ClientCoEditingBufferManager"] = "Client.CoEditing.BufferManager";
    TraceSources["ClientCoEditingVSCodeEvent"] = "Client.CoEditing.VSCodeEvent";
    TraceSources["ClientFileProvider"] = "Client.FileProvider";
    TraceSources["ClientLauncher"] = "Client.Launcher";
    TraceSources["ClientRpc"] = "Client.Rpc";
    TraceSources["ClientRpcAuth"] = "Client.Rpc.Auth";
    TraceSources["ClientRpcFile"] = "Client.Rpc.File";
    TraceSources["ClientRpcPortForwarding"] = "Client.Rpc.PortForwarding";
    TraceSources["ClientRpcServerSharing"] = "Client.Rpc.ServerSharing";
    TraceSources["ClientRpcSourceEvent"] = "Client.Rpc.SourceEvent";
    TraceSources["ClientRpcStream"] = "Client.Rpc.Stream";
    TraceSources["ClientRpcStreamManager"] = "Client.Rpc.StreamManager";
    TraceSources["ClientRpcTerminal"] = "Client.Rpc.Terminal";
    TraceSources["ClientRpcTerminalEndpoint"] = "Client.Rpc.TerminalEndpoint";
    TraceSources["ClientRpcWorkspace"] = "Client.Rpc.Workspace";
    TraceSources["ClientRpcWorkspaceUser"] = "Client.Rpc.WorkspaceUser";
    TraceSources["ClientRpcSessionContext"] = "Client.Rpc.SessionContext";
    TraceSources["ClientWorkspace"] = "Client.Workspace";
    TraceSources["ClientRemoteBuild"] = "Client.RemoteBuild";
    TraceSources["ClientCSharpLS"] = "Client.CSharpLS";
    TraceSources["ClientLSP"] = "Client.LSP";
    TraceSources["ClientSharedTerminal"] = "Client.SharedTerminal";
    TraceSources["ClientWorkspaceAccessControl"] = "Client.Workspace.AccessControl";
    TraceSources["ClientAccessControl"] = "Client.AccessControl";
    TraceSources["ClientSearch"] = "Client.Search";
    TraceSources["ClientSolutionView"] = "Agent.SolutionView";
    TraceSources["BreakpointManager"] = "BreakpointManager";
    TraceSources["DebugAdapter"] = "Debug.Adapter";
    TraceSources["DebugTargetHostProcess"] = "Debug.TargetHostProcess";
    TraceSources["DebugHost"] = "Debug.Host";
    TraceSources["DebugHostAdapter"] = "Debug.HostAdapter";
    TraceSources["DebugRemote"] = "Debug.Remote";
    TraceSources["DebugSessionHost"] = "Debug.SessionHost";
    TraceSources["DebugRpcSessionHost"] = "Debug.Rpc.SessionHost";
    TraceSources["DebugRpcHostAdapter"] = "Debug.Rpc.HostAdapter";
    TraceSources["DebugRpcHost"] = "Debug.Rpc.Host";
    TraceSources["ForwardingTcpServer"] = "ForwardingTcpServer";
    TraceSources["Telemetry"] = "Telemetry";
    TraceSources["ClientAccessCheck"] = "ClientAccessCheck";
    TraceSources["LSPHost"] = "LSP.Host";
    TraceSources["LSPCoauthoringManager"] = "LSP.CoauthoringManager";
    TraceSources["ReviewsDiffs"] = "Reviews.Diffs";
    TraceSources["VSIX"] = "VSIX";
    TraceSources["CLI"] = "CLI";
    TraceSources["TTY"] = "TTY";
    TraceSources["Settings"] = "Settings";
    TraceSources["API"] = "API";
})(TraceSources = exports.TraceSources || (exports.TraceSources = {}));
/* tslint:disable:variable-name */
exports.AccessControlService = {
    name: 'accessControl',
    methods: ['getAccessControl'],
    events: ['accessControlChanged'],
};
exports.AuthenticationService = {
    name: 'auth',
    methods: ['getLoginUri', 'findLoginCode', 'login', 'loginWithCachedToken', 'loginWithExternalToken', 'logout', 'getCurrentUser'],
    events: [],
};
exports.BrokerAuthorizationService = {
    name: 'brokerAuthorization',
    methods: ['authorize'],
    events: [],
};
exports.BrokerManagerService = {
    name: 'brokerManager',
    methods: ['register', 'tryRevoke'],
    events: [],
};
exports.ConfigurationService = {
    name: 'version',
    methods: ['exchangeVersions', 'exchangeSettings'],
    events: [],
};
exports.FileService = {
    name: 'file',
    methods: ['listRoots', 'list', 'readText', 'readStream', 'writeText', 'writeStream', 'createDirectory', 'delete', 'copy', 'move', 'getFiles', 'isExcluded', 'findFiles', 'getTextSearchResults'],
    events: ['filesChanged'],
};
exports.FirewallService = {
    name: 'firewall',
    methods: ['getFirewallStatus'],
    events: [],
};
exports.PortForwardingService = {
    name: 'portForwarding',
    methods: ['getSharedServers'],
    events: ['sharingStarted', 'browseSharingStarted', 'sharingStopped', 'sharingChanged'],
};
exports.ServerSharingService = {
    name: 'serverSharing',
    methods: ['startSharing', 'stopSharing', 'stopSharingBrowseSessions', 'getSharedServers', 'updateSessionName'],
    events: ['sharingStarted', 'browseSharingStarted', 'sharingStopped', 'sharingChanged'],
};
exports.SessionContextService = {
    name: 'sessionContext',
    methods: ['sendSessionStateUpdateToClient', 'sendSessionStatusUpdateToClient'],
    events: ['sessionStateUpdate', 'sessionStatusUpdate'],
};
exports.SolutionViewService = {
    name: 'solutionView',
    methods: ['getChildrenNodes', 'getRootNodes'],
    events: [],
};
exports.SourceEventService = {
    name: 'sourceEvent',
    methods: ['fireEvent', 'setSourceData', 'getSourceData'],
    events: ['event'],
};
exports.StreamManagerService = {
    name: 'streamManager',
    methods: ['getStream'],
    events: [],
};
exports.StreamService = {
    name: 'stream',
    methods: ['getStreamTraits', 'getLength', 'setLength', 'seek', 'readBytes', 'writeBytes', 'disposeStream'],
    events: [],
};
exports.TaskOutputService = {
    name: 'taskOutput',
    methods: ['getTaskOutputs', 'shareTaskOutput', 'updateTaskOutputFeed', 'closeTaskOutput'],
    events: ['taskOutputShared', 'taskOutputFeedUpdated', 'taskOutputClosed'],
};
exports.TelemetryService = {
    name: 'telemetry',
    methods: ['initialize', 'getServiceUri'],
    events: ['genericOperation'],
};
exports.TerminalEndpoint = {
    name: 'terminalEndpoint',
    methods: ['readBytes', 'writeBytes', 'readString', 'writeString'],
    events: [],
};
exports.TerminalService = {
    name: 'terminal',
    methods: ['startTerminal', 'getRunningTerminals', 'resizeTerminal', 'stopTerminal', 'setTerminalReadOnlyForGuests'],
    events: ['terminalStarted', 'terminalResized', 'terminalStopped', 'terminalReadOnlyChanged'],
};
exports.TextSearchService = {
    name: 'textSearch',
    methods: ['getTextSearchResults'],
    events: [],
};
exports.WorkspaceAccessControlService = {
    name: 'workspaceAccessControl',
    methods: ['getAccessControl', 'setAccessControl', 'requestOperationAccess', 'setOperationAccess', 'rejectOperation'],
    events: ['accessControlChanged', 'operationRejected', 'operationAccessChanged', 'opeationAccessRequested'],
};
exports.WorkspaceDiagnosticsService = {
    name: 'workspaceDiagnostics',
    methods: ['getDiagnostics'],
    events: ['diagnosticDataChanged'],
};
exports.WorkspaceService = {
    name: 'workspace',
    methods: ['getWorkspace', 'listWorkspaces', 'shareWorkspace', 'unshareWorkspace', 'joinWorkspace', 'unjoinWorkspace', 'registerServices'],
    events: ['servicesChanged', 'connectionStatusChanged', 'progressUpdated', 'userRemoved'],
};
exports.WorkspaceTaskService = {
    name: 'workspaceTask',
    methods: ['getSupportedTasks', 'getTaskExecutions', 'runTask', 'runDefaultBuildTask', 'terminateTask'],
    events: ['taskStarted', 'taskTerminated'],
};
exports.WorkspaceUserService = {
    name: 'workspaceuser',
    methods: ['acceptOrRejectGuest', 'removeUser', 'fireProgressUpdatedToGuest', 'getCountOfGuestsWithSameAccount', 'rejectGuest'],
    events: ['workspaceSessionChanged'],
};
exports.LanguageServerProvider = {
    methods: ['getMetadata', 'request', 'notify'],
    events: ['notified'],
};
exports.DebuggerHostService = {
    name: 'DebuggerHostService',
    methods: ['getCurrentDebugSessions', 'launchDebugSession', 'getLaunchConfigurations'],
    events: ['debugSessionChanged', 'launchConfigurationsChanged'],
};

//# sourceMappingURL=VSLS.js.map
